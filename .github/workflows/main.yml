name: Continuous Integration and Delivery

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js '20.x'
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install Dependencies
      run: npm ci
    - name: Lint and Automatically Fix
      run: npm run lint:fix

  build-and-unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js '20.x'
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test -- --forceExit --detectOpenHandles

  security-SAST:
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/nodemaster
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  semantic-versioning:
    needs: build-and-unit-tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: '0' 

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch 
          WITH_V: true
          PRERELEASE: true
      
      - name: Set up Docker Image Env
        run: |
          echo "CI_POSTSERVER_IMAGE=${{ secrets.GHCR_PREFIX }}/postserver-ci:${{ steps.tag_version.outputs.new_tag }}" >> $GITHUB_ENV
          echo "PROD_POSTSERVER_IMAGE=${{ secrets.GHCR_PREFIX }}/postserver-prod:${{ steps.tag_version.outputs.new_tag }}" >> $GITHUB_ENV

      - name: Set fallback tag if necessary
        if: steps.tag_version.outputs.new_tag == ''
        run: |
          echo "Fallback tag is being used because no new tag was generated."
          echo "CI_POSTSERVER_IMAGE=${{ secrets.GHCR_PREFIX }}/postserver-ci:latest" >> $GITHUB_ENV
          echo "PROD_POSTSERVER_IMAGE=${{ secrets.GHCR_PREFIX }}/postserver-prod:latest" >> $GITHUB_ENV

      - name: Recording image names
        run: |
          echo "CI_POSTSERVER_IMAGE=${CI_POSTSERVER_IMAGE}"
          echo "PROD_POSTSERVER_IMAGE=${PROD_POSTSERVER_IMAGE}"
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}

  build-and-push-ci:
    needs: semantic-versioning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push CI images
        run: |
          docker build -f ./Dockerfile -t ${{ secrets.GHCR_PREFIX }}/postserver-ci:latest .
          docker push ${{ secrets.GHCR_PREFIX }}/postserver-ci:latest
      
      - name: Security Scan for CI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image --severity HIGH,CRITICAL ${{ secrets.GHCR_PREFIX }}/postserver-ci:latest

  build-and-push-production:
    needs: [semantic-versioning, build-and-push-ci]
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout main
        uses: actions/checkout@v3  
      - name: Dependency Check
        run: npm audit --production --audit-level=high
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build production images
        run: |
          docker build -f ./Dockerfile -t ${{ secrets.GHCR_PREFIX }}/postserver-prod:latest .
      - name: Security Scan Production
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image --severity HIGH,CRITICAL ${{ secrets.GHCR_PREFIX }}/postserver-prod:latest
      - name: Push production images
        run: |
          docker push ${{ secrets.GHCR_PREFIX }}/postserver-prod:latest
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.semantic-versioning.outputs.new_tag }}
          release_name: Release ${{ needs.semantic-versioning.outputs.new_tag }}
          body: "New release ${{ needs.semantic-versioning.outputs.new_tag }}"
