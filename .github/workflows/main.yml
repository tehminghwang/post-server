name: Continuous Integration and Delivery

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js '20.x'
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install Dependencies
      run: npm ci
    - name: Lint and Automatically Fix
      run: npm run lint:fix

  build-and-unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js '20.x'
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
  
  semantic-versioning:
    needs: build-and-unit-tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.64.0
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          DEFAULT_BUMP: patch 
          WITH_V: true
          PRERELEASE: false
      
      - name: Set up Docker Image Env
        run: |
          echo "CI_POSTSERVER_IMAGE=${{ secrets.GHCR_PREFIX }}/postserver-ci:${{ steps.tag_version.outputs.new_tag }}" >> $GITHUB_ENV
          echo "PROD_POSTSERVER_IMAGE=${{ secrets.GHCR_PREFIX }}/postserver-prod:${{ steps.tag_version.outputs.new_tag }}" >> $GITHUB_ENV

      - name: Set fallback tag if necessary
        if: steps.tag_version.outputs.new_tag == ''
        run: |
          echo "Fallback tag is being used because no new tag was generated."
          echo "CI_POSTSERVER_IMAGE=${{ secrets.GHCR_PREFIX }}/postserver-ci:latest" >> $GITHUB_ENV
          echo "PROD_POSTSERVER_IMAGE=${{ secrets.GHCR_PREFIX }}/postserver-prod:latest" >> $GITHUB_ENV

      - name: Recording image names
        run: |
          echo "CI_POSTSERVER_IMAGE=${CI_POSTSERVER_IMAGE}"
          echo "PROD_POSTSERVER_IMAGE=${PROD_POSTSERVER_IMAGE}"

  build-and-push:
    needs: semantic-versioning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push CI images
        run: |
          docker build -f ./Dockerfile -t ghcr.io/tehminghwang/postserver-ci:latest .
          docker push ghcr.io/tehminghwang/postserver-ci:latest

      # ${{ env.CI_POSTSERVER_IMAGE }}

      # Optionally, build and push production images similarly, using PROD_POSTSERVER_IMAGE

      # This step is optional and can be used if you wish to also build and push production images directly.
      # Production images could be based on a different criteria, such as tagging a release.
      # - name: Build and push production images
      #   run: |
      #     docker build ./website -f ./website/Dockerfile -t ${{ env.PROD_WEBSITE_IMAGE }}
      #     docker push ${{ env.PROD_WEBSITE_IMAGE }}
      #     docker build ./nginx -f ./nginx/Dockerfile -t ${{ env.PROD_NGINX_IMAGE }}
      #     docker push ${{ env.PROD_NGINX_IMAGE }}


  # Additional jobs such as deployment can be added here.
  # The deployment step can be customized based on your target environment.
